.\" Copyright 1993-95 by Carl Harris, Jr. Copyright 1996 by Eric S. Raymond
.\" All rights reserved.
.\" For license terms, see the file COPYING in this directory.
.TH fetchmail LOCAL
.SH NAME
fetchmail \- deliver mail fetched from a POP or IMAP server
.SH SYNOPSIS
.B fetchmail
[\fI options \fR] \fI [server-host...]\fR
.SH DESCRIPTION
.I fetchmail
is a batch mail-retrieval/forwarding utility intended to be used over
on-demand TCP/IP links (such as SLIP or PPP connections).  It fetches
mail from remote mail servers and forwards it to your local (client)
machine's delivery system.  You can then handle the retrieved mail
using normal mail user agents such as \fIelm\fR(1) or \fIMail\fR(1).
The \fBfetchmail\fR utility can be run in a daemon mode to repeatedly
poll one or more systems at a specified interval.
.PP
The
.I fetchmail
program can gather mail from servers supporting any of the common
mail-retrieval protocols: POP2 (as specified in RFC 937), POP3 (RFC
1725), IMAP2bis (as implemented by the 4.4BSD imapd program), and
IMAP4 (as specified by RFC1730).  It can use (but does not require)
the RPOP and LAST facilities removed from later POP3 versions.
.PP
As each message is retrieved \fIfetchmail\fR normally delivers it via SMTP to
port 25 on the machine it is running on (localhost), just as though it
were being passed in over a normal TCP/IP link.  The mail will then be
delivered locally via your system's MDA (Mail Delivery Agent, usually
\fI/usr/lib/sendmail\fR but your system may use a different one such
as \fIsmail\fR, \fImmdf\fR, or \fIqmail\fR).  All the delivery-control
mechanisms (such as \fI.forward\fR files) normally available through
your system MDA will therefore work.
.PP
The behavior of
.I fetchmail
is controlled by command-line options and a run control file,
\fI~/.fetchmailrc\fR, the syntax of which we describe below.  Command-line
options override
.I ~/.fetchmailrc
declarations.
.PP
To facilitate the use of
.I fetchmail
In scripts, pipelines, etc., it returns an appropriate exit code upon 
termination -- see EXIT CODES below.
.SH OPTIONS
The following options modify the behavior of \fIfetchmail\fR.  It is
seldom necessary to specify any of these once you have a
working \fI.fetchmailrc\fR file set up.
.TP
.B \-a, --all
Retrieve both old (seen) and new messages from the mailserver.  The
default is to fetch only messages the server has not marked seen.
Note that POP2 retrieval, and POP3 retrieval on servers without the
LAST command, behaves as though --all is always on (see RETRIEVAL
FAILURE MODES below).
.TP
.B \-S host, --smtphost host
Specify an host to forward mail to (other than localhost).
.TP
.B \-m, \--mda
You can force mail to be passed to an MDA directly (rather than
forwarded to port 25) with the -mda or -m
option (this can be useful if you don't want to run sendmail as an
SMTP listener for security or other reasons).  
Some possible MDAs are "/usr/sbin/sendmail -oem %s",
"/usr/lib/sendmail -oem %s",
"/usr/formail", and "/usr/bin/deliver %s" (if the MDA command contains
%s, that escape will be expanded into your username on the client
machine).
.TP
.B \-F, --flush
POP3/IMAP only.  Delete old (previously retrieved) messages from the mailserver
before retrieving new messages.
.TP
.B \-f pathname, --fetchmailrc pathname
Specify a non-default name for the 
.I .fetchmailrc
run control file.
.TP
.B \-k, --keep
Keep retrieved messages in folder on remote mailserver.  Normally, messages 
are deleted from the folder on the mailserver after they have been retrieved.
Specifying the 
.B keep 
option causes retrieved messages to remain in your folder on the mailserver.
.TP
.B \-K, --kill
Delete retrieved messages from the remote mailserver.  This
option forces retrieved mail to be deleted.  It may be useful if
you have specified a default of \fBnokill\fR in your \fI.fetchmailrc\fR.
.TP
.B \-p, \--protocol proto
Specify the protocol to used when communicating with the remote 
mailserver.  If no protocol is specified,
.I fetchmail
will try each of the supported protocols in turn, terminating after
any successful attempt.
.I proto 
may be one of the following:
.RS
.IP IMAP
IMAP2bis, a compatible subset of IMAP4.
.IP POP2
Post Office Protocol 2
.IP POP3
Post Office Protocol 3
.IP APOP
Use POP3 with MD5 authentication.
.IP RPOP
POP3 with \fI.rhosts\fR processing (not recommended).
.RE
.TP
.B \-P, --port
The  option permits you to specify a TCP/IP port to connect on.  You
will need to specify this in order to use RPOP authentication.  Otherwise
this option will seldom be necessary as all the supported protocols have
well-established default port numbers.
.TP
.B \-r folder, --remote folder
Causes a specified non-default mail folder on the mailserver to be retrieved.
The syntax of the folder name is server dependent, as is the default
behavior when no folder is specified.
.TP
.B \-s, --silent
Silent mode.  Suppresses all progress/status messages that are normally
echoed to stderr during a fetch.  If both the 
.B silent
and
.B verbose
options are specified, the 
.B verbose
option takes precedence.
.TP
.B \-u name, --username name
Specifies the user idenfication to be used when logging-in to the mailserver.
The appropriate user identification is both server and user-dependent.  
The default is your login name on the machine that is running 
.I fetchmail.
See USER AUTHENTICATION below for a complete description.
.TP
.B \-v, --verbose
Verbose mode.  All control messages passed between 
.I fetchmail
and the mailserver are echoed to stderr.  Specifying
.B verbose
causes normal progress/status messages which would be redundant or meaningless
to be modified or omitted.
.TP
.B \-N, --norewrite
Normally,
.I fetchmail
edits RFC-822 address headers (To, From, Cc, Bcc, and Reply-To) in
fetched mail so that any mail IDs local to the server are expanded to
full addresses (@ and the mail server hostname are appended).  This enables 
replies on the client to get addressed correctly (otherwise your
mailer might think they should be addressed to local users on the
client machine).  This option disables the rewrite.
.TP
.B \-V, --version
Displays the version information for your copy of 
.I fetchmail.
No POP connection is made.
Instead, for each server specified, all option information
that would be computed if
.I fetchmail.
were connecting to that server is displayed.
.PP
Each server name that you specify following the options on the
command line will be queried.  If you don't specify any servers
on the command line, each server in your 
.I ~/.fetchmailrc
file will be queried.
.SH USER AUTHENTICATION
User authentication in 
.I fetchmail
is very much like the authentication mechanism of 
.I ftp(1).
The correct user-id and password depend upon the underlying security
system at the mailserver.  
.PP
If the mailserver is a Unix machine on which you have an ordinary user 
account, your regular login name and password are used with 
.I fetchmail.
If you use the same login name on both the server and the client machines,
you needn't worry about specifying a user-id with the 
.B \-u
option \-\- 
the default behavior is to use your login name on the client machine as the 
user-id on the server machine.  If you use a different login name
on the server machine, specify that login name with the
.B \-u
option.  e.g. if your login name is 'jsmith' on a machine named 'mailgrunt',
you would start 
.I fetchmail 
as follows:
.IP
fetchmail -u jsmith mailgrunt
.PP
The default behavior of 
.I fetchmail
is to prompt you for your mailserver password before the connection is
established.  This is the safest way to use 
.I fetchmail
and ensures that your password will not be compromised.  You may also specify
your password in your
.I ~/.fetchmailrc
file.  This is convenient when using 
.I fetchmail
in daemon mode or with scripts.
.PP
On mailservers that do not provide ordinary user accounts, your user-id and 
password are usually assigned by the server administrator when you apply for 
a mailbox on the server.  Contact your server administrator if you don't know 
the correct user-id and password for your mailbox account.
.PP
POP3 versions up to the RFC1225 version supported an alternate
authentication mechanism called RPOP intended to address the security
risk inherent in sending unencrypted account passwords across the net
(in RFC1460 this facility was replaced with APOP).  If you specify the
RPOP protocol and a connection port in the privileged range (1..1024),
.I fetchmail 
will ship your password entry to the mail server as an RPOP id.
(Note: you'll need to be running fetchmail setuid root for RPOP to
work --
.I fetchmail
has to bind to a privileged port locally in order for the mail 
server to believe it's allowed to bind to a privileged remote port.)
.PP
RFC1460 introduced APOP authentication.  In this variant of POP3,
you register an APOP password on your server host (the program
to do this with on the server is probably called \fIpopauth\fR(8)).  You
put the same password in your 
.I .fetchmailrc
file.  Each time 
.I fetchmail
logs in, it sends a cryptographically secure hash of your password and
the server greeting time to the server, which can verify it by
checking its authorization database. 
.SH DAEMON MODE
The 
.B --daemon
or
.B -d 
option runs 
.I fetchmail
in daemon mode.  You must specify a numeric argument which is a
polling interval in seconds.
.PP
In daemon mode, 
.I fetchmail
puts itself in background and runs forever, querying each specified
host and then sleeping for the given polling interval.
.PP
Simply invoking
.IP
fetchmail -d 900
.PP
will, therefore, poll the hosts described in your 
.I ~/.fetchmailrc
file once every fifteen minutes.
.PP
Only one daemon process is permitted per user; in daemon mode,
.I fetchmail
makes a per-user lockfile to guarantee this.  The option
.B --quit
will kill a running daemon process.
.PP
The
.B -L
or
.B --logfile
option allows you to redirect status messages emitted while in daemon
mode into a specified logfile (follow the option with the logfile name).
This is primarily useful for debugging configurations.
.SH RETRIEVAL FAILURE MODES
The protocols \fIfetchmail\fR uses to talk to mail servers are next to
bulletproof.  In normal operation forwarding to port 25, no message is
ever deleted (or even marked for deletion) on the host until the SMTP
listener on the client has acknowledged to \fIfetchmail\fRthat the
message has been accepted for delivery.  When forwarding to an MDA,
however, there is more possibility of error (because there's no way
for fetchmail to get a reliable positive acknowledgement from the MDA).
.PP
The normal mode of \fIfetchmail\fR is to try to download only `new'
messages, leaving untouched (and undeleted) messages you have already
read directly on the server (or fetched with a previous \fIfetchmail
--keep\fR).  But you may find that messages you've already read on the
server are being fetched (and deleted) even when you don't specify
--all.  There are several reasons this can happen.
.PP
One could be that you're using POP2.  The POP2 protocol includes no
representation of `new' or `old' state in messages, so \fIfetchmail\fR
must treat all messages as new all the time.  POP2 is obsolete.
.PP
Under POP3, blame RFC1725.  That late version of the POP3 protocol
specification ill-advisedly removed the LAST command, and some POP
servers (including the one distributed with at least some versions of
SunOS) follow it (you can verify this by invoking \fIfetchmail -v\fR
to the mail server and watching the response to LAST early in the
query).  The fix is to install an older POP3 server with LAST or
(better) switch to an IMAP server.
.PP
Another potential POP3 problem might be servers that insert messages
in the middle of mailboxes (some VMS implementations of mail are
rumored to do this).  The \fIfetchmail\fR code assumes that new
messages are appended to the end of the mailbox; when this is not true
it may treat some old messages as new and vice versa.  The only 
real fix for this problem is to  switch to IMAP.
.PP
The IMAP code uses the presence or absence of the server flag \eSeen
to decide whether or not a message is new.  Under Unix, it counts on
your IMAP server to notice the BSD-style Status flags set by mail user
agents and set the \Seen flag from them when appropriate.  All Unix
IMAP servers we know of do this, though it's not specified by the IMAP
RFCs.  If you ever trip over a server that doesn't, the symptom will
be that messages you have already read on your host will look new to
the server.  In this (unlikely) case, only messages you fetched with
\fIfetchmail --keep\fR will be both undeleted and marked old.
.SH THE RUN CONTROL FILE
The preferred way to set up fetchmail (and the only way if you want to
avoid specifying passwords each time it runs) is to write a
\fI.fetchmailrc\fR file in your home directory.  To protect the security
of your passwords, your \fI~/.fetchmailrc\fR may not have more than u+r,u+w
permissions;
.I fetchmail
will complain and exit otherwise.
.PP
Comments begin with a '#' and extend through the end of the line.
Otherwise the file consists of a series of free-format server entries.
Any amount of whitespace separates keywords, tokens, or strings 
in server entries but is otherwise ignored (but whitespace enclosed
in double quotes is treated as part of the string).
Keywords and identifiers are case sensitive.
When there is a conflict between the command-line arguments and the
arguments in this file, the command-line arguments take precedence.
.PP
Each server entry consists of the keyword \fBserver\fR, followed by a
server name, followed by server options, followed by any number of
user descriptions.
.PP
Legal server options are:

    server
    protocol (or proto)
    port

Legal user options are

    username (or user)
    is
    password (or pass)
    remotefolder (or remote)
    smtphost (or smtp)
    mda
    keep
    flush
    fetchall
    rewrite
    skip
    nokeep
    noflush
    nofetchall
    norewrite
    noskip
.PP
All options correspond to the obvious command-line arguments except
three: \fBis\fR, \fBpassword\fR and \fBskip\fR.
.PP
The \fBis\fR keyword associates a following local username with the
mailserver user name in the entry.  It is intended to be used in 
configurations where \fIfetchmail\fR runs as root and retrieves
mail for multiple local users.  If no \fBis\fR clause is present,
the default local username is the same as the argument of the
\fBuser\fR keyword.
.PP
The \fBpassword\fR option requires a string argument, which is the password
to be used with the entry's server.
.PP
The \fBskip\fR option tells
.I fetchmail 
not to query this host unless it is explicitly named on the command
line.  A host entry with this flag will be skipped when
.I fetchmail
called with no arguments steps through all hosts in the run control file.
(This option allows you to experiment with test entries safely.)
.PP
Legal protocol identifiers are

    auto (or AUTO)
    pop2 (or POP2)
    pop3 (or POP3)
    imap (or IMAP)
    apop (or APOP)
    rpop (or RPOP)
.PP
You can also use the `noise' keywords \fBand\fR, \fBwith\fR,
\fBhas\fR, \fBwants\fR, and \fBoptions\fR anywhere in an entry to make
it resemble English.  They're ignored, but but can make entries much
easier to read at a glance.  The punctuation characters ':', ';' and
',' are also ignored.
.PP
The words \fBhere\fR and \fBthere\fR also have useful English-like
significance.  Normally `\fBuser eric is esr\fR' would mean that 
mail for the remote user \fBeric\fR is to be delivered to \fBesr\fR,
but you can make this clearer by saying `\fBuser eric there is esr here\fR',
or reverse it by saying `\fBuser esr here is eric there\fR'
.PP
Basic format is:

.nf
  server SERVERNAME protocol PROTOCOL username NAME password PASSWORD 
.fi
.PP
Example:

.nf
  server pop.provider.net protocol pop3 username jsmith password secret1
.fi
.PP
Or, using some abbreviations:

.nf
  server pop.provider.net proto pop3 user jsmith password secret1
.fi
.PP
Multiple servers may be listed:

.nf
  server pop.provider.net proto pop3 user jsmith pass secret1
  server other.provider.net proto pop2 user John.Smith pass My^Hat
.fi

Here's a version of those two with more whitespace and some noise words: 

.nf
  server pop.provider.net proto pop3
      user jsmith, with password secret1, is jsmith here;
  server other.provider.net proto pop2:
      user John.Smith with password My^Hat, is John.Smith here;
.fi

This version is much easier to read and doesn't cost significantly
more (parsing is done only once, at startup time).

.PP
If you need to include whitespace in a parameter string, enclose the
string in double quotes.  Thus:

.nf
  server mail.provider.net proto pop3
        user jsmith has password "u can't krak this"
                    and wants mda "/bin/mail %s"
.fi

You may have an initial server description headed by the keyword
`defaults' instead of `server' followed by a name.  Such a record
is interpreted as defaults for all queries to use. It may be overwritten
by individual server descriptions.  So, you could write:

.nf
  defaults proto pop3
        user jsmith
  server pop.provider.net
        pass secret1
  server mail.provider.net
        user jjsmith has password secret2
.fi

It's possible to specify more than one user per server (this is only
likely to be useful when running fetchmail in daemon mode as root).
The \fBuser\fR keyword leads off a user description, and every user
description except optionally the first one must include it.  (If the
first description lacks the \fBuser\fR keyword, the name of the
invoking user is used .) Here's a contrived example:

.nf
  server pop.provider.net proto pop3 port 3111
        pass gumshoe
        user jsmith with pass secret1 is smith here
        user jones with pass secret2 is jjones here
.fi

This says that the user invoking \fIfetchmail\fR has the same username
on pop.provider.net, and password `gumshoe' there.
It also associates the local username `smith' with the pop.provider.net
username `jsmith' and the local username `jones' with the pop.provider.net
username `jjones'.
.PP
This example is contrived because, in practice, you are very unlikely
to be specifying multiple users per server unless running it as root
(thus the \fBpass gumshoe\fR would try to fetch root's mail on
pop-provider.net, which is probably not what you want).
In any case, we strongly recommend always having an explicit
\fBuser\fR clause when specifying nultiple users for server.
.SH EXIT CODES
To facilitate the use of 
.I fetchmail
in shell scripts, an exit code is returned to give an indication
of what occurred during a given connection.
.PP
The exit codes returned by 
.I fetchmail
are as follows:
.IP 0
One or more messages were successfully retrieved.
.IP 1
There was no mail awaiting retrieval.
.IP 2
An error was encountered when attempting to open a socket for the POP 
connection.  If you don't know what a socket is, don't worry about it --
just treat this as an 'unrecoverable error'.
.IP 3
The user authentication step failed.  This usually means that a bad 
user-id, password, or RPOP id was specified.
.IP 4
Some sort of fatal protocol error was detected.
.IP 5
There was a syntax error in the arguments to 
.I fetchmail.
.IP 6
The run control file had bad permissions.
.IP 7
There was an error condition reported by the server (POP3 only).
.IP 8
Exclusion error.  This means 
.I fetchmail
either found another copy of itself already running, or failed in such
a way that it isn't sure whether another copy is running.
.IP 9
The 
.I fetchmail.
run failed while trying to do an SMTP port open or transaction.
.IP 10
Something totally undefined occured.  This is usually caused by a bug within
.I fetchmail.
Do let me know if this happens.
.PP
When
.I fetchmail
queries more than one host, the returned status is that of the last
host queried.
.SH AUTHORS
.I fetchmail
was originated (under the name `popclient') by Carl Harris at Virginia
Polytechnic Institute and State University (a.k.a. Virginia Tech).
.PP
Version 3.0 of popclient was extensively rewritten and improved by
Eric S. Raymond <esr@snark.thyrsus.com>. The program's name was
then changed to
.I fetchmail
to reflect both the presence of IMAP support and the symmetry with sendmail
created by the new SMTP forwarding default.
.PP
.SH FILES
.TP 5
~/.fetchmailrc
default run control file
.TP 5
${TMPDIR}/fetchmail-${HOST}-${USER}
lock file to help prevent concurrent runs.
.SH ENVIRONMENT
For correct initialization, 
.I fetchmail
requires either that both the USER and HOME environment variables are
correctly set, or that \fBgetpwuid\fR(3) be able to retrieve a password
entry from your user ID.
.SH BUGS AND KNOWN PROBLEMS
Use of any of the supported protocols other than APOP requires that
the program send unencrypted passwords over the TCP/IP connection to
the mail server.  This creates a risk that name/password pairs might
be snaffled with a packet sniffer or more sophisticated monitoring
software.
.PP
The RPOP support is not yet well tested.
.PP
Send comments, bug reports, gripes, and the like to Eric S. Raymond
<esr@thyrsus.com>.
.SH NOTES
This program used to be called `popclient' (the name was changed
because it supports IMAP now and may well support more remote-fetch
protocols such as DMSP in the future).  If called through a link named
popclient, it will look in ~/.poprc for its run control file.  As
long as the file does not use the removed \fBlimit\fR or \fBlocalfolder\fR
options, this will often work.  (The new run control file syntax also has
to be a bit stricter about the order of options than the old,
in order to support multiple user desriptions per server; you may have
to rearrange things a bit.)
.PP
The --stdout, --local, and --limit arguments of previous
versions have been removed.  Those features did jobs that belonged to
your local MDA and mail reader. The job of
.I fetchmail
is to forward local mail to your MDA, not to be one.  Saint-Exupery
said, "Perfection [in design] is achieved not when there is nothing
more to add, but rather when there is nothing more to take away."
This program isn't perfect, but it's trying.
.PP
The --password option of previous (popclient) versions has been removed -- it
encouraged people to expose passwords in scripts.  Passwords
must now be specified either interactively or in your
.I ~/.fetchmailrc
file.  The short-form -p option now specifies the protocol to use.
.PP
The reason the password isn't stored encrypted is because this doesn't
actually add protection.  Anyone who's acquired permissions to read your
fetchmailrc file will be able to run 
.I fetchmail
as you anyway -- and if it's
your password they're after, they'd be able to use the necessary decoder from
.I fetchmail
itself to get it.  All encryption would do in this context is give a
false sense of security to people who don't think very hard.
.SH SEE ALSO
mail(1), binmail(1), sendmail(8), popd(8), imapd(8)
RFC 937, RFC 1081, RFC 1082, RFC1176, RFC 1225, RFC 1460, RFC 1725.
